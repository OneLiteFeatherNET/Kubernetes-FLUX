apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: mimir
  namespace: grafana
spec:
  chart:
    spec:
      version: "*"
  valuesFrom:
    - kind: Secret
      name: auth-minio-secret
      valuesKey: GF_S3_SECRET_KEY
      targetPath: loki.storage.s3.secretAccessKey
    - kind: Secret
      name: auth-minio-secret
      valuesKey: GF_S3_ACCESS_KEY
      targetPath: loki.storage.s3.accessKeyId
    - kind: Secret
      name: auth-minio-secret
      valuesKey: GF_S3_URL
      targetPath: loki.storage.s3.s3
  values:
    alertmanager:
      persistentVolume:
        enabled: true
      replicas: 2
      resources:
        limits:
          memory: 1.4Gi
        requests:
          cpu: 1
          memory: 1Gi
      statefulSet:
        enabled: true


    mimir:
      structuredConfig:
        common:
          storage:
            filesystem: null
            type: s3
            bucketNames:
              chunks: loki-chunk
              ruler: loki-ruler
              admin: loki-admin
            s3:
              # AWS endpoint URL
              endpoint: http://minio.minio.svc.cluster.local:9000
              # AWS region where the S3 bucket is located
              region: null
              # AWS signature version (e.g., v2 or v4)
              # Forces the path style for S3 (true/false)
              s3ForcePathStyle: true
              # Allows insecure (HTTP) connections (true/false)
              insecure: true
              sse_encryption: false
              # HTTP configuration settings
              http_config:
                idle_conn_timeout: 90s
                response_header_timeout: 0s
                insecure_skip_verify: true
    blocks_storage:
      s3:
        bucket_name: mimir-blocks

    alertmanager_storage:
      s3:
        bucket_name: mimir-alertmanager

    ruler_storage:
      s3:
        bucket_name: mimir-ruler

    compactor:
      persistentVolume:
        size: 20Gi
      resources:
        limits:
          memory: 2.1Gi
        requests:
          cpu: 1
          memory: 1.5Gi

    distributor:
      replicas: 2
      resources:
        limits:
          memory: 5.7Gi
        requests:
          cpu: 2
          memory: 4Gi

    ingester:
      persistentVolume:
        size: 50Gi
      replicas: 3
      resources:
        limits:
          memory: 12Gi
        requests:
          cpu: 3.5
          memory: 8Gi
      topologySpreadConstraints: { }
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: target # support for enterprise.legacyLabels
                    operator: In
                    values:
                      - ingester
              topologyKey: 'kubernetes.io/hostname'

            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - ingester
              topologyKey: 'kubernetes.io/hostname'

      zoneAwareReplication:
        topologyKey: 'kubernetes.io/hostname'

    admin-cache:
      enabled: true
      replicas: 3

    chunks-cache:
      enabled: true
      replicas: 3

    index-cache:
      enabled: true
      replicas: 3

    metadata-cache:
      enabled: true
      replicas: 3

    results-cache:
      enabled: true
      replicas: 3

    minio:
      enabled: false

    overrides_exporter:
      replicas: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 128Mi

    querier:
      replicas: 1
      resources:
        limits:
          memory: 5.6Gi
        requests:
          cpu: 2
          memory: 4Gi

    query_frontend:
      replicas: 1
      resources:
        limits:
          memory: 2.8Gi
        requests:
          cpu: 2
          memory: 2Gi

    ruler:
      replicas: 1
      resources:
        limits:
          memory: 2.8Gi
        requests:
          cpu: 1
          memory: 2Gi

    store_gateway:
      persistentVolume:
        size: 10Gi
      replicas: 3
      resources:
        limits:
          memory: 2.1Gi
        requests:
          cpu: 1
          memory: 1.5Gi
      topologySpreadConstraints: { }
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: target # support for enterprise.legacyLabels
                    operator: In
                    values:
                      - store-gateway
              topologyKey: 'kubernetes.io/hostname'

            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/component
                    operator: In
                    values:
                      - store-gateway
              topologyKey: 'kubernetes.io/hostname'
      zoneAwareReplication:
        topologyKey: 'kubernetes.io/hostname'

    nginx:
      replicas: 1
      resources:
        limits:
          memory: 731Mi
        requests:
          cpu: 1
          memory: 512Mi

    # Grafana Enterprise Metrics feature related
    admin_api:
      replicas: 1
      resources:
        limits:
          memory: 128Mi
        requests:
          cpu: 100m
          memory: 64Mi

    gateway:
      replicas: 1
      resources:
        limits:
          memory: 731Mi
        requests:
          cpu: 1
          memory: 512Mi