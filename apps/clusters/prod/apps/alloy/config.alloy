logging {
  level  = sys.env("ALLOY_LOG_LEVEL")
  format = "logfmt"
}

discovery.kubernetes "pods" {
  role = "pod"
}

discovery.kubernetes "endpoints" {
  role = "endpoints"
}

discovery.relabel "pods_metrics" {
  targets = discovery.kubernetes.pods.targets

  rule {
    action        = "keep"
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_scrape"]
    regex         = "true"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_pod_annotation_prometheus_io_path"]
    target_label  = "__metrics_path__"
    regex         = "(.+)"
  }

  rule {
    action        = "replace"
    source_labels = ["__address__", "__meta_kubernetes_pod_annotation_prometheus_io_port"]
    target_label  = "__address__"
    regex         = "([^:]+)(?::\\d+)?;(\\d+)"
    replacement   = "$1:$2"
  }

  rule {
    action = "labelmap"
    regex  = "__meta_kubernetes_pod_label_(.+)"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_pod_name"]
    target_label  = "pod"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_pod_container_name"]
    target_label  = "container"
  }
}

prometheus.scrape "pods" {
  targets    = discovery.relabel.pods_metrics.output
  forward_to = [prometheus.remote_write.default.receiver]
}

discovery.relabel "svc_metrics" {
  targets = discovery.kubernetes.endpoints.targets

  rule {
    action        = "keep"
    source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_scrape"]
    regex         = "true"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_service_annotation_prometheus_io_path"]
    target_label  = "__metrics_path__"
    regex         = "(.+)"
  }

  rule {
    action        = "replace"
    source_labels = ["__address__", "__meta_kubernetes_service_annotation_prometheus_io_port"]
    target_label  = "__address__"
    regex         = "([^:]+)(?::\\d+)?;(\\d+)"
    replacement   = "$1:$2"
  }

  rule {
    action = "labelmap"
    regex  = "__meta_kubernetes_service_label_(.+)"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_namespace"]
    target_label  = "namespace"
  }

  rule {
    action        = "replace"
    source_labels = ["__meta_kubernetes_service_name"]
    target_label  = "service"
  }
}

prometheus.scrape "services" {
  targets    = discovery.relabel.svc_metrics.output
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  external_labels = {
    "cluster"     = sys.env("CLUSTER"),
    "__replica__" = sys.env("KUBE_POD_NAME"),
  }
  endpoint {
    url = coalesce(sys.env("PROM_REMOTE_WRITE_URL"), "http://mimir-nginx.grafana.svc.cluster.local/api/v1/push")
  }
}

loki.write "default" {
  endpoint {
    url = "http://loki-gateway.grafana.svc.cluster.local:80/loki/api/v1/push"
  }
}

loki.source.kubernetes "pods" {
  targets    = discovery.kubernetes.pods.targets
  forward_to = [loki.process.k8s_logs.receiver]
}

loki.process "k8s_logs" {
  stage.match {
    selector = "{namespace=\"ingress-nginx\", container=\"controller\"}"
    stage.json {
      expressions = {
        status       = "status",
        method       = "method",
        host         = "vhost",
        request_time = "request_time",
      }
    }
    stage.labels {
      values = {
        status = "",
        method = "",
        host   = "",
      }
    }
  }

  forward_to = [loki.write.default.receiver]
}

loki.source.kubernetes_events "events" {
  log_format = "json"
  forward_to = [loki.process.k8s_events.receiver]
}

loki.process "k8s_events" {
  stage.json {
    expressions = {
      type     = "type",
      reason   = "reason",
      obj_kind = "involvedObject.kind",
      obj_name = "involvedObject.name",
    }
  }
  stage.labels {
    values = {
      level    = "type",
      reason   = "reason",
      obj_kind = "obj_kind",
      obj_name = "obj_name",
    }
  }
  forward_to = [loki.write.default.receiver]
}
